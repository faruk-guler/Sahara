- name: Execute commands and store output
  hosts: all
  tasks:
    - name: Create output file
      ansible.builtin.file:
        path: /tmp/{{ inventory_hostname }}_{{ ansible_date_time.date }}.out
        state: touch

    - name: Execute commands and append output to file
      shell: |
        {
          echo "==== Process Information ====";
          for cmd in \
            "ps aux | grep -E 'httpd|nginx|apache2'" \
            "ps aux | grep -E 'mysql|mariadb'" \
            "ps aux | grep postgres" \
            "ps aux | grep pmon" \
            "ps aux | grep mongo" \
            "ps aux | grep -E 'mysql|mariadb|postgres|oracle|mongo|mssql'" \
            "ps aux" \
            "ps -ef"; do
              echo $cmd;
              eval $cmd || echo "command not available";
              echo "----------------------------------------";
          done;

          echo "==== Web Server Configurations ====";
          for cmd in \
            "nginx -T 2>/dev/null" \
            "apache2 -S 2>/dev/null" \
            "apache2ctl -S 2>/dev/null" \
            "httpd -S 2>/dev/null"; do
              echo $cmd;
              eval $cmd || echo "command not available";
              echo "----------------------------------------";
          done;

          echo "==== Open Ports and Connections ====";
          for cmd in \
            "netstat -plant" \
            "netstat -tulpn" \
            "netstat -tulnp | grep -E '80|443'" \
            "ss" \
            "netstat -plant | grep -i listen"; do
              echo $cmd;
              eval $cmd || echo "command not available";
              echo "----------------------------------------";
          done;

          echo "==== System Services Status ====";
          for cmd in \
            "systemctl status mysql" \
            "systemctl status mariadb" \
            "systemctl status postgresql" \
            "lsnrctl status" \
            "systemctl status mongod" \
            "systemctl status mssql-server" \
            "systemctl status apache2.service" \
            "systemctl status php-fpm" \
            "systemctl list-units --state=running" \
            "systemctl list-unit-files"; do
              echo $cmd;
              eval $cmd || echo "command not available";
              echo "----------------------------------------";
          done;

          echo "==== Web Server Configurations ====";
          for cmd in \
            "grep -R 'ServerName' /etc/httpd/" \
            "grep -R 'ServerName' /etc/apache2/" \
            "grep -R 'server_name' /etc/nginx/" \
            "grep DocumentRoot /etc/httpd/conf/httpd.conf" \
            "grep DocumentRoot /etc/apache2/sites-available/*.conf" \
            "grep root /etc/nginx/sites-available/*.conf" \
            "grep -Ri 'DocumentRoot' /etc/apache2/" \
            "grep -Ri 'server_name' /etc/nginx/" \
            "grep -Ri 'fastcgi_pass' /etc/nginx/"; do
              echo $cmd;
              eval $cmd || echo "command not available";
              echo "----------------------------------------";
          done;

          echo "==== PHP Information ====";
          for cmd in \
            "php -v" \
            "php -m" \
            "apachectl -M | grep php"; do
              echo $cmd;
              eval $cmd || echo "command not available";
              echo "----------------------------------------";
          done;

          echo "==== Docker Information ====";
          for cmd in \
            "docker ps" \
            "docker ps -a" \
            "docker images -a" \
            "docker images"; do
              echo $cmd;
              eval $cmd || echo "command not available";
              echo "----------------------------------------";
          done;

          echo "==== System Information ====";
          for cmd in \
            "uname -a" \
            "ifconfig -a" \
            "ip a" \
            "ip route show" \
            "netstat -nr" \
            "fdisk -l" \
            "rpm -qa --last" \
            "vgdisplay" \
            "lvdisplay" \
            "pvs" \
            "vgs" \
            "lsblk -d" \
            "lsblk" \
            "blkid" \
            "lsscsi" \
            "cat /etc/fstab" \
            "cat /etc/resolv.conf" \
            "mount" \
            "cat /etc/*release" \
            "cat /etc/hosts" \
            "ls -l /dev/mapper" \
            "cat /boot/grub/menu.lst" \
            "cat /boot/grub2/grub.cfg | grep -v ^#" \
            "cat /boot/grub2/grub.cfg" \
            "lvs -a -o +devices -P" \
            "lvs --segments" \
            "lvs -o+lv_layout,stripes" \
            "lvs -a -o+lv_layout,lv_role,stripes,devices" \
            "free -g" \
            "lscpu" \
            "df -h" \
            "cat /etc/passwd" \
            "cat /etc/shadow" \
            "cat /etc/group" \
            "ls -l /boot/"; do
              echo $cmd;
              eval $cmd || echo "command not available";
              echo "----------------------------------------";
          done;
        } >> /tmp/{{ inventory_hostname }}_{{ ansible_date_time.date }}.out 2>&1
      ignore_errors: yes

    - name: Ensure destination directory exists on remote server
      ansible.builtin.file:
        path: /home/svc_aux/backup/serverbackups
        state: directory
      delegate_to: 10.1.34.26

    - name: Fetch output file to controller
      ansible.builtin.fetch:
        src: /tmp/{{ inventory_hostname }}_{{ ansible_date_time.date }}.out
        dest: /tmp/
        flat: yes

    - name: Copy output file to remote server
      ansible.builtin.shell: |
        scp /tmp/{{ inventory_hostname }}_{{ ansible_date_time.date }}.out svc_aux@10.1.34.26:/home/svc_aux/backup/serverbackups/
      delegate_to: localhost
      vars:
        ansible_ssh_pass: just44now

- name: Convert CSV to HTML on remote server
  hosts: 10.1.34.26
  remote_user: svc_aux
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: yes
  tasks:
    - name: Convert CSV to HTML
      command: python3 /home/svc_aux/backup/serverbackups/new_convert_backups_to_html.py
      become: yes
      become_user: root
      args:
        chdir: /home/svc_aux/backup/serverbackups/
